* Essential key bindings
** Tumx-like frame splitting
Split windows like in Tmux (but without the prefix key.)

#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "C-w \"") 'split-window-below)
  (define-key evil-normal-state-map (kbd "C-w %") 'split-window-horizontally)
#+end_src

** Save with RET in normal mode
Save buffer when hitting RET in normal mode.

#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "<RET>") 'save-buffer)
#+end_src

And use RET to get out of editing and org-mode code block

#+begin_src emacs-lisp
  (evil-define-key 'normal org-src-mode-map (kbd "<RET>") 'org-edit-src-exit)
  (evil-define-key 'normal org-src-mode-map (kbd "<backspace>") 'org-edit-src-abort)
#+end_src
* Extensions
** TODO Hexl mode
** Org-Mode
*** DONE Citation setup
CLOSED: [2015-11-01 Sun 22:30]
**** Settings
Set the bibtex library, PDF program, and where the pdf files live.
#+begin_src emacs-lisp
  (setq org-link-abbrev-alist
        '(("bib" . "~/doc/lib/bib/main.bib::%s")))
  (setq reftex-default-bibliography '("/home/aleks/doc/lib/bib/main.bib"))
  (setq org-cite-link-pdf-program "zathura")
  (setq org-cite-link-library "/home/aleks/doc/lib/%s.pdf")
#+end_src
**** Open PDFs in Library
#+begin_src emacs-lisp
  (defun open-pdf-from-library (path)
    "Open a pdf from a bibtex identifier. This is a hack, and should probably be
  done differently, but it works for now."
    (let* ((full-path (format org-cite-link-library path)))
      (if (file-exists-p full-path)
          (progn
            (start-process (format "%s-%s" org-cite-link-pdf-program path)
                           (format "*%s-process*" org-cite-link-pdf-program)
                           (format "/usr/bin/%s" org-cite-link-pdf-program)
                           full-path)
            (message "Viewing %s" path))
        (user-error (format "Couldn't find reference: '%s'" full-path)))))
#+end_src
**** Export commands
#+begin_src emacs-lisp
  (defun org-cite-link-export (command path desc format)
    (cond
     ((eq format 'latex) (format "\\%s{%s}" command path))))

  (org-add-link-type "citet" 'open-pdf-from-library
                     (lambda (path desc format)
                       (org-cite-link-export "citet" path desc format)))
  (org-add-link-type "citep" 'open-pdf-from-library
                     (lambda (path desc format)
                       (org-cite-link-export "citep" path desc format)))
  (org-add-link-type "autocite" 'open-pdf-from-library
                     (lambda (path desc format)
                       (org-cite-link-export "autocite" path desc format)))
  (org-add-link-type "textcite" 'open-pdf-from-library
                     (lambda (path desc format)
                       (org-cite-link-export "textcite" path desc format)))
#+end_src
**** Org & Reftex
#+begin_src emacs-lisp
  (defun org-mode-reftex-setup ()
    (message "Loading org mode reftex setup.")
    (load-library "reftex")
    (and (buffer-file-name) (file-exists-p (buffer-file-name))
         (progn ;enable auto-revert-mode to update reftex when bibtex file changes on disk
           (global-auto-revert-mode t)
           (reftex-parse-all)
           (reftex-set-cite-format
            '((?p . "[[citep:%l][(%2a %y)]]")
              (?t . "[[citet:%l][%2a (%y)]]")
              (?a . "[[autocite:%l][(%2a %y)]]")
              (?c . "[[textcite:%l][%2a (%y)]]"))))))

  (add-hook 'org-mode-hook 'org-mode-reftex-setup)
#+end_src
*** In-Line LaTeX
#+begin_src emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
#+end_src
*** TODO LaTeX export
This uses minted and pygments to set source code written in Babel. The
=-shell-escape= option to XeLaTeX is a bit dangerous, so you shouldn't just
set arbitrary downloaded TeX-documents with it.
It also sets our TeX processing engine to XeLaTeX, which is as it should be.
#+begin_src emacs-lisp
  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("" "minted" nil))
  (setq org-latex-listings 'minted)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
  (setq org-latex-pdf-process
        '("latexmk --shell-escape -xelatex -output-directory=%o %f"))
#+end_src
The default preamble includes stuff that is not very compatible wiht XeLaTeX,
so we overwrite the it.
#+begin_src emacs-lisp
  (setq org-latex-default-packages-alist
        '(("" "fontspec" nil)
          ("" "csquotes" nil)
          ; Xelatex-compatible Emacs-default content of this variable
          ("" "graphicx" nil)
          ("" "longtable" nil)
          ("" "float" nil)
          ("" "wrapfig" nil)
          ("" "rotating" nil)
          ("normalem" "ulem" t)
          ("" "amsmath" t)
          ("" "marvosym" t)
          ("" "wasysym" t)
          ("" "amssymb" t)
          ("breaklinks,colorlinks,citecolor=blue" "hyperref" nil)
          "\\tolerance=1000"
          ; Polyglossia has to be loaded last for some reason I don't remember.
          ("" "polyglossia" nil)))
#+end_src
** Whitespace
#+begin_src emacs-lisp
  (setq whitespace-style '(face trailing tabs tab-mark))
  (global-whitespace-mode)
#+end_src
** Haskell-Mode
Use stack by default.
#+begin_src emacs-lisp
(setq haskell-process-type 'stack-ghci)
#+end_src
