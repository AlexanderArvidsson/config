* Notes
** TODO SPC-TAB should switch buffers
I've tried to map it, but it seems you can't bind command expressions?
** DONE Company mode does not seem to work
In tide, completion with M-/ works well, but company doesn't show
anything, even though the mode is enabled. Further configuration
of company may be required.
** DONE Prettierjs
Need to also add prettier js
* Emacs config
** Package Configuration
*** Fix TLS
A temporary workaround is needed while [[https://github.com/syl20bnr/spacemacs/issues/12535][this issue]] is still in
effect. Fixes TLS with melpa, which caused some packages to not be
visible.
#+BEGIN_SRC emacs-lisp
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+END_SRC
*** Melpa
Add Melpa source
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (package-initialize)
  (add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)
#+END_SRC
*** Use-Package
Try to always download the packages that =use-package= wants to have installed.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC
** Emacs configuration
*** Backups
No files with =~= everywhere.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
#+END_SRC
*** Font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                      :family "Fira Code"
                      :weight 'normal
                      :width 'normal
                      :height 110)
#+END_SRC
*** Theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'wombat)
#+END_SRC
*** Misc
Visual improvements
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-startup-screen t)
#+END_SRC
*** Keybindings
This is a function to set up keybindings with hydra & evil. It
should get called after both evil and hydra are loaded.
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-define-key
     "M-x" 'counsel-M-x)
    (general-define-key
     :states 'normal
     "RET" 'save-buffer)
    (general-define-key
     :states 'normal
     :prefix ","
     "," 'counsel-M-x
     "f" 'counsel-find-file
     "g s" 'magit-status
     "b b" 'counsel-switch-buffer
     "b d" 'kill-current-buffer
     "p p" 'projectile-switch-project
     "p f" 'projectile-find-file
     "p b" 'projectile-switch-to-buffer))
#+END_SRC
** Evil
Activate evil mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config
    (evil-mode t))

  (use-package evil-surround
    :config
    (global-evil-surround-mode t))
#+END_SRC
** Ivy & Counsel
#+BEGIN_SRC emacs-lisp
  (use-package ivy)
  (use-package counsel)
#+END_SRC
** Which-Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (setq company-dabbrev-downcase 0)
    (setq company-idle-delay 0.2)
    (global-company-mode))
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config (global-flycheck-mode))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode +1)
    (setq projectile-completion-system 'ivy))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit)
  (use-package evil-magit)
  (defhydra hydra-magit (:exit t)
    "magit"
    ("s" magit-status "status")
    ("b" magit-blame "blame"))
#+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config
    (smartparens-global-mode t))
#+END_SRC
** Org-Mode
Enable indent mode, so spaces don't clutter the file.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
** Typescript
#+BEGIN_SRC emacs-lisp
  (defun my-web-mode-hook ())
  (defun my-tide-setup-hook ()
    (tide-setup)
    (eldoc-mode)
    (tide-hl-identifier-mode +1)

    (setq web-mode-enable-auto-quoting nil)
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-attr-indent-offset 2)
    (setq web-mode-attr-value-indent-offset 2)
    (set (make-local-variable 'company-backends)
         '((company-tide company-files :with company-yasnippet)
           (company-dabbrev-code company-dabbrev)))
    (flycheck-add-mode 'typescript-tslint 'web-mode))

  (use-package prettier-js
    :defer t)

  (use-package web-mode
    :mode (("\\.tsx$" . web-mode))
    :hook ((web-mode . company-mode)
           (web-mode . (lambda () (prettier-js-mode)))
           (web-mode . (lambda () (pcase (file-name-extension buffer-file-name)
                                    ("tsx" (my-tide-setup-hook))
                                    (_ (my-web-mode-hook)))))))
  (use-package tide
    :mode (("\\.ts$" . tide-mode)))

  (setq-default typescript-indent-level 2)
  (setq-default tide-tsserver-executable "/home/aleks/local/npm/bin/tsserver")
#+END_SRC
