* Notes
** TODO Make a prettier mode line with all-the-icons package
* Emacs config
** Package Configuration
*** Fix TLS
A temporary workaround is needed while [[https://github.com/syl20bnr/spacemacs/issues/12535][this issue]] is still in
effect. Fixes TLS with melpa, which caused some packages to not be
visible.
#+BEGIN_SRC emacs-lisp
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+END_SRC
*** Melpa
Add Melpa source
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (package-initialize)
  (add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)
#+END_SRC
*** Use-Package
Try to always download the packages that =use-package= wants to have installed.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC
** Backups
No files with =~= everywhere.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'wombat)
#+END_SRC
*** Custom colors
#+BEGIN_SRC emacs-lisp
  (custom-theme-set-faces 'wombat `(region ((t :background "#224488"))))
#+END_SRC
*** Font
#+BEGIN_SRC emacs-lisp
  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Sans" :height 110 :weight normal :width normal))))
   '(fixed-pitch ((t ( :family "Fira Code" :slant normal :weight normal :height 110 :width narrow)))))
#+END_SRC
** Misc
Visual improvements
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
  (global-hl-line-mode)
  (set-face-attribute hl-line-face nil :underline nil)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq-default
   inhibit-startup-screen t
   indent-tabs-mode nil
   initial-scratch-message ""
   mouse-yank-at-point t
   show-trailing-whitespace t)
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Keybindings
This is a function to set up keybindings with hydra & evil. It
should get called after both evil and general are loaded.
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-define-key
     :states 'normal
     "M-x" 'counsel-M-x
     "RET" 'save-buffer)
    (general-define-key
     :states 'normal
     :prefix ","
     "," (general-simulate-key "M-x")
     "TAB" 'switch-to-prev-buffer
     "f" 'counsel-find-file
     "g s" 'magit-status

     "a" 'org-agenda

     "b b" 'counsel-switch-buffer
     "b d" 'kill-current-buffer

     "p p" 'projectile-switch-project
     "p f" 'projectile-find-file
     "p b" 'projectile-switch-to-buffer

     "w n" 'make-frame-command
     "w c" 'evil-window-delete
     "w o" 'other-window
     "w s" 'evil-window-split
     "w v" 'evil-window-vsplit))
#+END_SRC
* Extensions
** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (setq company-dabbrev-downcase 0)
    (setq company-idle-delay 0.2)
    (global-company-mode))
  (use-package company-posframe
    :config (company-posframe-mode 1))
#+END_SRC
** Diff-hl
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :config
    (global-diff-hl-mode)
    (setq-default diff-hl-side 'right)
    :init
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+END_SRC
** Evil
*** Basic settings
Activate evil mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config
    (evil-mode t))

  (use-package evil-surround
    :config
    (global-evil-surround-mode t))

  (use-package evil-exchange
    :config (evil-exchange-install))
#+END_SRC
*** Multi-cursor
#+BEGIN_SRC emacs-lisp
  (use-package evil-multiedit
    :config
    (general-define-key
     :states 'visual
     "R" 'evil-multiedit-match-all
     "r" 'evil-multiedit-and-next)
    (general-define-key
     :states 'normal
     :prefix ", r"
     "r" 'evil-multiedit-match-and-next
     "R" 'evil-multiedit-match-and-prev)
    (general-define-key
     :states 'multiedit
     "RET" 'evil-multiedit-toggle-or-restrict-region
     "M-n" 'evil-multiedit-next
     "M-p" 'evil-multiedit-prev)
    (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match))
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config (global-flycheck-mode))
#+END_SRC
** Ivy & Counsel
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t))
  (use-package counsel)
#+END_SRC
*** Prescient
#+BEGIN_SRC emacs-lisp
  (use-package prescient
    :config (prescient-persist-mode 1))
  (use-package ivy-prescient
    :config (ivy-prescient-mode 1))
  (use-package company-prescient
    :config (company-prescient-mode 1))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit)
  (use-package evil-magit)
#+END_SRC
** Parentheses
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config
    (smartparens-global-mode t)
    (setq show-parent-delay 0)
    (show-paren-mode 1))

  (use-package rainbow-delimiters
    :hook ((web-mode . rainbow-delimiters-mode)
           (emacs-lisp-mode . rainbow-delimiters-mode)))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode +1)
    (setq projectile-completion-system 'ivy))
#+END_SRC
** Ripgrep
#+BEGIN_SRC emacs-lisp
  (use-package rg
    :config
    (general-define-key
     :states 'normal
     :prefix ", s"
     "s" 'rg-dwim
     "p" 'rg-project
     "l" 'rg-list-searches
     "S" 'rg-save-search))
#+END_SRC
** Which-Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC
* Languages
** CSS
#+BEGIN_SRC emacs-lisp
  (use-package css-mode
    :custom (css-indent-offset 2))
  (use-package scss-mode
    :mode ("\\.scss$" "\\.sass$"))
#+END_SRC
** CSV
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode)
#+END_SRC
** Docker
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode :mode "Dockerfile")
#+END_SRC
** Emacs-Lisp
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'emacs-lisp-mode-map
   :prefix ", ."
   "e e" 'eval-last-sexp
   "e b" 'eval-buffer)
#+END_SRC
** Graphql
#+BEGIN_SRC emacs-lisp
  (use-package graphql-mode)
#+END_SRC
** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode)
#+END_SRC
** JS & friends
*** Json
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :mode "\\.json$")
  (add-to-list 'flycheck-disabled-checkers 'json-python-json)
#+END_SRC
*** JS
#+BEGIN_SRC emacs-lisp
  (setq-default js-indent-level 2)
#+END_SRC
*** Typescript
#+BEGIN_SRC emacs-lisp
  (defun my-web-mode-hook ())
  (defun my-tide-setup-hook ()
    (tide-setup)
    (eldoc-mode)
    (tide-hl-identifier-mode +1)

    (setq web-mode-enable-auto-quoting nil)
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-attr-indent-offset 2)
    (setq web-mode-attr-value-indent-offset 2)
    (set (make-local-variable 'company-backends)
         '((company-tide company-files :with company-yasnippet)
           (company-dabbrev-code company-dabbrev)))
    (flycheck-add-mode 'typescript-tslint 'web-mode)
    (general-define-key
     :states 'normal
     :keymaps 'local
     :prefix ", ."
     "f" 'tide-fix
     "i" 'tide-organize-imports
     "u" 'tide-references
     "R" 'tide-restart-server
     "d" 'tide-documentation-at-point
     "F" 'tide-format

     "e s" 'tide-error-at-point
     "e l" 'tide-project-errors
     "e i" 'tide-add-tslint-disable-next-line
     "e n" 'tide-find-next-error
     "e p" 'tide-find-previous-error

     "r r" 'tide-rename-symbol
     "r F" 'tide-refactor
     "r f" 'tide-rename-file)
    (general-define-key
     :states 'normal
     :keymaps 'local
     :prefix "g"
     :override t

     "d" 'tide-jump-to-definition
     "D" 'tide-jump-to-implementation
     "b" 'tide-jump-back))

  (use-package prettier-js
    :defer t)
  (use-package tide
    :defer t)

  (use-package web-mode
    :mode (("\\.tsx$" . web-mode))
    :init
    (add-hook 'web-mode-hook 'variable-pitch-mode)
    (add-hook 'web-mode-hook 'company-mode)
    (add-hook 'web-mode-hook 'prettier-js-mode)
    (add-hook 'web-mode-hook (lambda () (pcase (file-name-extension buffer-file-name)
                        ("tsx" (my-tide-setup-hook))
                        (_ (my-web-mode-hook))))))

  (use-package typescript-mode
    :mode (("\\.ts$" . typescript-mode))
    :init
    (add-hook 'typescript-mode-hook 'my-tide-setup-hook)
    (add-hook 'typescript-mode-hook 'company-mode)
    (add-hook 'typescript-mode-hook 'prettier-js-mode))


  (setq-default typescript-indent-level 2)
  (setq-default tide-tsserver-executable "/home/aleks/local/npm/bin/tsserver")
#+END_SRC
** Org-Mode
*** Prettification
Use =variable-pitch-mode= for org, but also correctly format
everything that needs fixed pitch.
#+BEGIN_SRC emacs-lisp
  (use-package org-variable-pitch
    :hook ((org-mode . org-variable-pitch-minor-mode)))
#+END_SRC

Enable indent mode, so spaces don't clutter the file.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook ((org-mode . org-indent-mode))
    :custom
    (setq-default org-edit-src-content-indentation 2))
#+END_SRC

*** Keybindings
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'org-mode-map
   :prefix ","
   "'" 'org-edit-special
   ". '" 'org-edit-special
   ". o" 'org-open-at-point
   ". h" 'org-promote-subtree
   ". l" 'org-demote-subtree
   ". a" 'org-archive-subtree
   ". s" 'org-schedule
   ". d" 'org-deadline
   ". c c" 'org-clock-in
   ". c o" 'org-clock-out
   ". c g" 'org-clock-goto
   ". c x" 'org-clock-cancel
   ". r" 'org-refile)
  (general-define-key
   :states 'normal
   :prefix ", o"
   "a" 'org-agenda)

  (add-hook 'org-src-mode-hook
            (lambda ()
              (general-define-key
               :keymaps 'local
               :states 'normal
               "RET" 'org-edit-src-exit
               "BS" 'org-edit-src-abort)))
#+END_SRC
*** Org-Agenda keybindings
#+BEGIN_SRC emacs-lisp

  (general-define-key
   :keymaps 'org-agenda-mode-map

   "k" 'org-agenda-previous-item
   "j" 'org-agenda-next-item
   "I" 'org-agenda-diary-entry
   "i" 'org-agenda-clock-in
   "s" 'org-agenda-schedule
   "c" 'org-capture
   "O" 'delete-other-windows
   "o" 'org-agenda-clock-out)
#+END_SRC
*** Basic configuration
Org-directory is =~/org=
#+BEGIN_SRC emacs-lisp
  (setq org-directory (concat (file-name-as-directory (getenv "HOME")) "org")
        org-agenda-include-diary nil
        my-org-main-file (concat (file-name-as-directory org-directory) "main.org")
        my-org-work-file (concat (file-name-as-directory org-directory) "work.org"))
#+END_SRC
*** Agenda views
All TODO entries that have not already been scheduled
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(("u" "Unscheduled TODO" todo ""
           ((org-agenda-overriding-header "\nUnscheduled TODO")
            (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))))))
#+END_SRC
*** Calendar
We want our weeks to start properly
#+BEGIN_SRC emacs-lisp
  (add-hook 'calendar-load-hook (lambda () calendar-set-date-style 'european))
#+END_SRC

Set the calendar location for sunset & sunrise. Tübingen Hbf is: =48.516738, 9.055493=
#+BEGIN_SRC emacs-lisp

  (setq calendar-longitude 48.5
        calendar-latitude 9.0
        calendar-location-name "Tübingen, Germany")

#+END_SRC

*** Editing documents
Place footnotes in the same section.
#+BEGIN_SRC emacs-lisp
  (setq-default org-footnote-section nil)
#+END_SRC

*** Refiling behaviour
Facilitate outlining by just matching on any heading in the org
file. Using ivy, this ends up being more usable.
#+BEGIN_SRC emacs-lisp
  (let ((file-list (mapcar (lambda (file) (concat (file-name-as-directory org-directory) file))
                           '("main.org" "work.org"))))
    (--each (--filter (file-readable-p it) file-list)
      (add-to-list 'org-agenda-files it)))

  (setq
   org-outline-path-complete-in-steps nil
   org-refile-targets '((nil . (:maxlevel . 4)))
   org-refile-use-outline-path 'file)
#+END_SRC
*** Capture
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :prefix ", c"
   "c" 'org-capture
   "l" '(bookmark-jump "org-capture-bookmark"))

  (setq org-capture-templates
        '(
          ("c" "Todo" entry (file+headline my-org-main-file "NEW")
           "* TODO %^{Title}\nCreated: %U\nRef: %f %a\n%i")
          ("w" "Work" entry (file+headline my-org-work-file "NEW")
           "* TODO %^{Title}\nCreated: %U\nRef: %f %a\n%i")))
#+END_SRC
** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode :mode "\\.ya?ml$")
#+END_SRC

