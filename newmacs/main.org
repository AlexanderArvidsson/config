* Notes
** TODO Make a prettier mode line with all-the-icons package
* Emacs config
** Package Configuration
*** Fix TLS
A temporary workaround is needed while [[https://github.com/syl20bnr/spacemacs/issues/12535][this issue]] is still in
effect. Fixes TLS with melpa, which caused some packages to not be
visible.
#+BEGIN_SRC emacs-lisp
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+END_SRC
*** Melpa
Add Melpa source
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (package-initialize)
  (add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t)
#+END_SRC
*** Use-Package
Try to always download the packages that =use-package= wants to have installed.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC
** Emacs configuration
*** Backups
No files with =~= everywhere.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
#+END_SRC
*** Font
#+BEGIN_SRC emacs-lisp
  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Sans" :height 110 :weight normal :width normal))))
   '(fixed-pitch ((t ( :family "Fira Code" :slant normal :weight normal :height 110 :width narrow)))))
#+END_SRC
*** Theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'wombat)
#+END_SRC
*** Misc
Visual improvements
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq-default
   inhibit-startup-screen t
   indent-tabs-mode nil
   initial-scratch-message ""
   mouse-yank-at-point t
   show-trailing-whitespace t)
  (global-subword-mode 1)
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Keybindings
This is a function to set up keybindings with hydra & evil. It
should get called after both evil and hydra are loaded.
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-define-key
     :states 'normal
     "M-x" 'counsel-M-x
     "RET" 'save-buffer)
    (general-define-key
     :states 'normal
     :prefix ","
     "," (general-simulate-key "M-x")
     "TAB" 'switch-to-prev-buffer
     "f" 'counsel-find-file
     "g s" 'magit-status

     "b b" 'counsel-switch-buffer
     "b d" 'kill-current-buffer

     "p p" 'projectile-switch-project
     "p f" 'projectile-find-file
     "p b" 'projectile-switch-to-buffer

     "w n" 'make-frame-command
     "w c" 'evil-window-delete
     "w o" 'other-window
     "w s" 'evil-window-split
     "w v" 'evil-window-vsplit))
#+END_SRC
** Evil
Activate evil mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config
    (evil-mode t))

  (use-package evil-surround
    :config
    (global-evil-surround-mode t))
#+END_SRC
** Ivy & Counsel
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config (ivy-mode 1))
  (use-package counsel)
#+END_SRC
** Which-Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (setq company-dabbrev-downcase 0)
    (setq company-idle-delay 0.2)
    (global-company-mode))
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config (global-flycheck-mode))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode +1)
    (setq projectile-completion-system 'ivy))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit)
  (use-package evil-magit)
#+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config
    (smartparens-global-mode t))
#+END_SRC
** Org-Mode
Use =variable-pitch-mode= for org, but also correctly format
everything that needs fixed pitch.
#+BEGIN_SRC emacs-lisp
  (use-package org-variable-pitch)
#+END_SRC

Enable indent mode, so spaces don't clutter the file.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook ((org-mode . org-indent-mode))
    :custom
    (setq-default org-edit-src-content-indentation 2))
#+END_SRC

Keybindings
#+BEGIN_SRC emacs-lisp
  (general-define-key
  :states 'normal
   :keymaps 'org-mode-map
   :prefix ","
   "'" 'org-edit-special
   ". o" 'org-open-at-point
   ". h" 'org-promote-subtree
   ". l" 'org-demote-subtree
   ". a" 'org-archive-subtree
   ". r" 'org-refile)

  (add-hook 'org-src-mode-hook
            (lambda ()
              (general-define-key
               :keymaps 'local
               :states 'normal
               "RET" 'org-edit-src-exit
               "BS" 'org-edit-src-abort)))
#+END_SRC

Place footnotes in the same section.
#+BEGIN_SRC emacs-lisp
  (setq-default org-footnote-section nil)
#+END_SRC

Org-directory is =~/org=
#+BEGIN_SRC emacs-lisp
  (setq org-directory (concat (file-name-as-directory (getenv "HOME")) "org"))
#+END_SRC

Facilitate outlining by just matching on any heading in the org
file. Using ivy, this ends up being more usable.
#+BEGIN_SRC emacs-lisp
  (let ((file-list (mapcar (lambda (file) (concat (file-name-as-directory org-directory) file))
                           '("main.org" "work.org"))))
    (--each (--filter (file-readable-p it) file-list)
      (add-to-list 'org-agenda-files it)))

  (setq
   org-outline-path-complete-in-steps nil
   org-refile-targets '((nil . (:maxlevel . 4)))
   org-refile-use-outline-path 'file)
#+END_SRC

** Mode line
** Emacs-Lisp
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'emacs-lisp-mode-map
   :prefix ", t"
   "e e" 'eval-last-sexp
   "e b" 'eval-buffer)
#+END_SRC
** Prescient
#+BEGIN_SRC emacs-lisp
  (use-package prescient
    :config (prescient-persist-mode 1))
  (use-package ivy-prescient
    :config (ivy-prescient-mode 1))
  (use-package company-prescient
    :config (company-prescient-mode 1))
#+END_SRC
** Diff-hl
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :config (global-diff-hl-mode)
    :init
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+END_SRC
** CSS
#+BEGIN_SRC emacs-lisp
  (use-package css-mode
    :custom (css-indent-offset 2))
  (use-package scss-mode
    :mode ("\\.scss$" "\\.sass$"))
#+END_SRC
** CSV
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode)
#+END_SRC
** Docker
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode :mode "Dockerfile")
#+END_SRC
** JS & friends
*** Json
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :mode "\\.json$")
  (add-to-list 'flycheck-disabled-checkers 'json-python-json)
#+END_SRC
*** JS
#+BEGIN_SRC emacs-lisp
  (setq-default js-indent-level 2)
#+END_SRC
*** Typescript
#+BEGIN_SRC emacs-lisp
  (defun my-web-mode-hook ())
  (defun my-tide-setup-hook ()
    (tide-setup)
    (eldoc-mode)
    (tide-hl-identifier-mode +1)

    (setq web-mode-enable-auto-quoting nil)
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-attr-indent-offset 2)
    (setq web-mode-attr-value-indent-offset 2)
    (set (make-local-variable 'company-backends)
         '((company-tide company-files :with company-yasnippet)
           (company-dabbrev-code company-dabbrev)))
    (flycheck-add-mode 'typescript-tslint 'web-mode)
    (general-define-key
     :states 'normal
     :keymaps 'local
     :prefix ", t"
     "f" 'tide-fix
     "i" 'tide-organize-imports
     "u" 'tide-references
     "R" 'tide-restart-server
     "d" 'tide-documentation-at-point
     "F" 'tide-format

     "e s" 'tide-error-at-point
     "e l" 'tide-project-errors
     "e i" 'tide-add-tslint-disable-next-line
     "e n" 'tide-find-next-error
     "e p" 'tide-find-previous-error

     "r r" 'tide-rename-symbol
     "r F" 'tide-refactor
     "r f" 'tide-rename-file)
    (general-define-key
     :states 'normal
     :keymaps 'local
     :prefix "g"
     :override t

     "d" 'tide-jump-to-definition
     "D" 'tide-jump-to-implementation
     "b" 'tide-jump-back))

  (use-package prettier-js
    :defer t)

  (use-package web-mode
    :mode (("\\.tsx$" . web-mode))
    :hook ((web-mode . company-mode)
           (web-mode . (lambda () (prettier-js-mode)))
           (web-mode . (lambda () (pcase (file-name-extension buffer-file-name)
                                    ("tsx" (my-tide-setup-hook))
                                    (_ (my-web-mode-hook)))))))
  (use-package tide
    :mode (("\\.ts$" . tide-mode)))

  (setq-default typescript-indent-level 2)
  (setq-default tide-tsserver-executable "/home/aleks/local/npm/bin/tsserver")
#+END_SRC
** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode :mode "\\.ya?ml$")
#+END_SRC
* Languages
